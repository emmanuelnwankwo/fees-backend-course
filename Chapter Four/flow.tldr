{
	"tldrawFileFormatVersion": 1,
	"schema": {
		"schemaVersion": 2,
		"sequences": {
			"com.tldraw.store": 4,
			"com.tldraw.asset": 1,
			"com.tldraw.camera": 1,
			"com.tldraw.document": 2,
			"com.tldraw.instance": 25,
			"com.tldraw.instance_page_state": 5,
			"com.tldraw.page": 1,
			"com.tldraw.instance_presence": 5,
			"com.tldraw.pointer": 1,
			"com.tldraw.shape": 4,
			"com.tldraw.asset.bookmark": 2,
			"com.tldraw.asset.image": 5,
			"com.tldraw.asset.video": 5,
			"com.tldraw.shape.group": 0,
			"com.tldraw.shape.text": 2,
			"com.tldraw.shape.bookmark": 2,
			"com.tldraw.shape.draw": 2,
			"com.tldraw.shape.geo": 9,
			"com.tldraw.shape.note": 7,
			"com.tldraw.shape.line": 5,
			"com.tldraw.shape.frame": 0,
			"com.tldraw.shape.arrow": 5,
			"com.tldraw.shape.highlight": 1,
			"com.tldraw.shape.embed": 4,
			"com.tldraw.shape.image": 4,
			"com.tldraw.shape.video": 2,
			"com.tldraw.binding.arrow": 0
		}
	},
	"records": [
		{
			"gridSize": 10,
			"name": "",
			"meta": {},
			"id": "document:document",
			"typeName": "document"
		},
		{
			"meta": {},
			"id": "page:page",
			"name": "Page 1",
			"index": "a1",
			"typeName": "page"
		},
		{
			"id": "pointer:pointer",
			"typeName": "pointer",
			"x": -70,
			"y": 1788.3333740234375,
			"lastActivityTimestamp": 1728155050685,
			"meta": {}
		},
		{
			"followingUserId": null,
			"opacityForNextShape": 1,
			"stylesForNextShape": {
				"tldraw:geo": "rectangle",
				"tldraw:size": "m",
				"tldraw:font": "mono"
			},
			"brush": null,
			"scribbles": [],
			"cursor": {
				"type": "default",
				"rotation": 0
			},
			"isFocusMode": false,
			"exportBackground": true,
			"isDebugMode": false,
			"isToolLocked": false,
			"screenBounds": {
				"x": 0,
				"y": 0,
				"w": 1232,
				"h": 760
			},
			"insets": [
				false,
				false,
				true,
				false
			],
			"zoomBrush": null,
			"isGridMode": false,
			"isPenMode": false,
			"chatMessage": "",
			"isChatting": false,
			"highlightedUserIds": [],
			"isFocused": true,
			"devicePixelRatio": 1.5,
			"isCoarsePointer": false,
			"isHoveringCanvas": true,
			"openMenus": [],
			"isChangingStyle": false,
			"isReadonly": false,
			"meta": {},
			"duplicateProps": null,
			"id": "instance:instance",
			"currentPageId": "page:page",
			"typeName": "instance"
		},
		{
			"editingShapeId": null,
			"croppingShapeId": null,
			"selectedShapeIds": [
				"shape:Uombyrx_WDmmiYjA9i03_"
			],
			"hoveredShapeId": "shape:Uombyrx_WDmmiYjA9i03_",
			"erasingShapeIds": [],
			"hintingShapeIds": [],
			"focusedGroupId": null,
			"meta": {},
			"id": "instance_page_state:page:page",
			"pageId": "page:page",
			"typeName": "instance_page_state"
		},
		{
			"x": 154,
			"y": -1207,
			"z": 1,
			"meta": {},
			"id": "camera:page:page",
			"typeName": "camera"
		},
		{
			"x": 137.33334350585938,
			"y": 170,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:lp4kZmW27cPrjSlPkuO7k",
			"type": "geo",
			"props": {
				"w": 131.33331298828125,
				"h": 120,
				"geo": "rectangle",
				"color": "black",
				"labelColor": "black",
				"fill": "none",
				"dash": "draw",
				"size": "m",
				"font": "draw",
				"text": "Client",
				"align": "middle",
				"verticalAlign": "middle",
				"growY": 0,
				"url": "",
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a1",
			"typeName": "shape"
		},
		{
			"x": 771.3333740234375,
			"y": 189.33334350585938,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:M1ZEP1xSI67nv1G06oDZb",
			"type": "geo",
			"props": {
				"w": 156,
				"h": 106.00003051757812,
				"geo": "rectangle",
				"color": "black",
				"labelColor": "black",
				"fill": "none",
				"dash": "draw",
				"size": "m",
				"font": "draw",
				"text": "Server",
				"align": "middle",
				"verticalAlign": "middle",
				"growY": 0,
				"url": "",
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a238w",
			"typeName": "shape"
		},
		{
			"x": 506,
			"y": 205.33334350585938,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:1IoqASAB6RpoFYUykp_gL",
			"type": "geo",
			"props": {
				"w": 109.3333740234375,
				"h": 61.69791793823242,
				"geo": "rectangle",
				"color": "black",
				"labelColor": "black",
				"fill": "none",
				"dash": "draw",
				"size": "m",
				"font": "draw",
				"text": "HTTP",
				"align": "middle",
				"verticalAlign": "middle",
				"growY": 0,
				"url": "",
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a44QD",
			"typeName": "shape"
		},
		{
			"x": 264.66668701171875,
			"y": 226,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:AwD05OpL8UiGlVgP4h2Ay",
			"type": "arrow",
			"props": {
				"dash": "draw",
				"size": "m",
				"fill": "none",
				"color": "black",
				"labelColor": "black",
				"bend": 0,
				"start": {
					"x": 0,
					"y": 0
				},
				"end": {
					"x": 237.33331298828125,
					"y": 6
				},
				"arrowheadStart": "none",
				"arrowheadEnd": "arrow",
				"text": "",
				"labelPosition": 0.5,
				"font": "draw",
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a1hfF",
			"typeName": "shape"
		},
		{
			"meta": {},
			"id": "binding:e47Iw62Rd5EHzJTXiw6-m",
			"type": "arrow",
			"fromId": "shape:AwD05OpL8UiGlVgP4h2Ay",
			"toId": "shape:lp4kZmW27cPrjSlPkuO7k",
			"props": {
				"isPrecise": false,
				"isExact": false,
				"normalizedAnchor": {
					"x": 0.9695433748573845,
					"y": 0.4666666666666667
				},
				"terminal": "start"
			},
			"typeName": "binding"
		},
		{
			"x": 615.3333740234375,
			"y": 227.33334350585938,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:615j9H2ow5JhV7Eh7EtPz",
			"type": "arrow",
			"props": {
				"dash": "draw",
				"size": "m",
				"fill": "none",
				"color": "black",
				"labelColor": "black",
				"bend": 0,
				"start": {
					"x": 0,
					"y": 0
				},
				"end": {
					"x": 153.33331298828125,
					"y": 12
				},
				"arrowheadStart": "none",
				"arrowheadEnd": "arrow",
				"text": "",
				"labelPosition": 0.5,
				"font": "draw",
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a522V",
			"typeName": "shape"
		},
		{
			"meta": {},
			"id": "binding:U-Qo8o46vcoHTFK_BD5Gy",
			"type": "arrow",
			"fromId": "shape:615j9H2ow5JhV7Eh7EtPz",
			"toId": "shape:1IoqASAB6RpoFYUykp_gL",
			"props": {
				"isPrecise": false,
				"isExact": false,
				"normalizedAnchor": {
					"x": 1,
					"y": 0.3565760520804744
				},
				"terminal": "start"
			},
			"typeName": "binding"
		},
		{
			"x": 868,
			"y": 321.3333435058594,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:2xc6i6YUxSkN_gopo6nzQ",
			"type": "arrow",
			"props": {
				"dash": "draw",
				"size": "m",
				"fill": "none",
				"color": "black",
				"labelColor": "black",
				"bend": -183.50303476496023,
				"start": {
					"x": 0,
					"y": 0
				},
				"end": {
					"x": -655.3333282470703,
					"y": -27.33331298828125
				},
				"arrowheadStart": "none",
				"arrowheadEnd": "arrow",
				"text": "",
				"labelPosition": 0.5,
				"font": "draw",
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a3BlN",
			"typeName": "shape"
		},
		{
			"meta": {},
			"id": "binding:wA-82uGTfojcz-jNR3d8k",
			"type": "arrow",
			"fromId": "shape:2xc6i6YUxSkN_gopo6nzQ",
			"toId": "shape:M1ZEP1xSI67nv1G06oDZb",
			"props": {
				"isPrecise": false,
				"isExact": false,
				"normalizedAnchor": {
					"x": 0.578125050291413,
					"y": 0.9587628111878377
				},
				"terminal": "start"
			},
			"typeName": "binding"
		},
		{
			"x": 522,
			"y": 270.4687690734863,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:UMcVlJRY06-wnflqtwjpO",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 91.05208587646484,
				"text": "GET\nPOST\nPATCH\nDELETE\nPUT",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a6AKj",
			"typeName": "shape"
		},
		{
			"x": 473.33331298828125,
			"y": 459.8021125793457,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:SYC5wsLNQNll-WMouFPGw",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 274.2708435058594,
				"text": "{\n  product_id: 1\n  product_name: \"car\"\n}",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a7C6t",
			"typeName": "shape"
		},
		{
			"x": 109.3333511352539,
			"y": 794.135425567627,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:N0mbXjwMN_1-W3VXLrwCk",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1119.2172142911643,
				"text": "GET - Read a specific resource (by an identifier) or a collection of resources.\n        GET /products\n              /product/{id} -> /product/1\n\nPOST - Create a new resource. Also a catch-all verb for operations that don’t fit into the other categories.\n          POST /product\n        {\n          product_name: \"book\"\n        }\n\nPUT - Replace a specific resource (by an identifier) or a collection of resources. Can also be used to create \n          a specific resource if the resource identifier is known before-hand.\n        PUT /product/1  \n        {\n          product_name: \"children book\"\n        }\n\nPATCH - Update a specific resource (by an identifier) or a collection of resources. This can be thought of \n            in some ways as a ‘partial update’ vs the replace that PUT performs.\n  \n\nDELETE - Remove/delete a specific resource by an identifier.\n            DELETE /product/1",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 0.8409370578089272
			},
			"parentId": "page:page",
			"index": "a82HQ",
			"typeName": "shape"
		},
		{
			"x": -66.63853429855499,
			"y": 1784.215652217541,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:Uombyrx_WDmmiYjA9i03_",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1324.2427785307327,
				"text": "Status Code  Description\n200 OK  - General success status code. Used to indicate success.\n201 CREATED - Successful creation occurred (via either POST or PUT). \n              Set the Location header to contain a link to the newly-created \n              resource (on POST). Response body content may or may not be present.\n204 NO CONTENT - Indicates success but nothing is in the response body, often \n                 used for DELETE and PUT operations.\n400 BAD REQUEST - General error for when fulfilling the request would cause an invalid \n                  state. Domain validation errors, missing data, etc. are some examples.\n401 UNAUTHORIZED - Error code response for missing or invalid authentication token.\n403 FORBIDDEN  - Error code for when the user is not authorized to perform the operation \n                 or the resource is unavailable for some reason (e.g. time constraints, etc.).\n404 NOT FOUND - Used when the requested resource is not found, whether it doesn’t exist \n                or if there was a 401 or 403 that, for security reasons, the service wants \n                to mask.\n405 METHOD NOT ALLOWED - Used to indicate that the requested URL exists, but the requested \n               HTTP method is not applicable. For example, POST /users/12345 where the API \n               doesn’t support creation of resources this way (with a provided ID). The Allow \n               HTTP header must be set when returning a 405 to indicate the HTTP methods that \n               are supported. In the previous case, the header would look like “Allow: GET, PUT, DELETE”\n409 CONFLICT - Whenever a resource conflict would be caused by fulfilling the request. \n               Duplicate entries, such as trying to create two customers with the same information, \n               and deleting root objects when cascade-delete is not supported are a couple of examples.\n500 INTERNAL SERVER ERROR - The general catch-all error when the server-side throws an exception. \n                            Use this only for errors that the consumer cannot address from their end.",
				"font": "mono",
				"textAlign": "start",
				"autoSize": true,
				"scale": 0.8218154432781742
			},
			"parentId": "page:page",
			"index": "a98JD",
			"typeName": "shape"
		}
	]
}